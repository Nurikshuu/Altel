import io
import os
import gradio as gr
import pandas as pd
from dotenv import load_dotenv

from src.connectors.youtube import fetch_comments as yt_fetch
from src.connectors.facebook import fetch_comments as fb_fetch
from src.connectors.instagram import fetch_comments as ig_fetch

from src.pipelines import run_pipeline
from src.responder import generate_reply
from src.utils import (
    detect_platform,
    extract_youtube_video_id,
    extract_facebook_object_id,
    extract_instagram_shortcode,
)

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

YOUTUBE_API_KEY = os.getenv("YOUTUBE_API_KEY", "")
FACEBOOK_ACCESS_TOKEN = os.getenv("FACEBOOK_ACCESS_TOKEN", "")
IG_USERNAME = os.getenv("IG_USERNAME", "")
IG_PASSWORD = os.getenv("IG_PASSWORD", "")
MAX_COMMENTS = int(os.getenv("MAX_COMMENTS", "100"))


def analyze(platform: str, url: str):
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –ø–ª–∞—Ç—Ñ–æ—Ä–º—É, –∑–∞–≥—Ä—É–∂–∞–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏, –∫–ª–∞—Å—Å–∏—Ñ–∏—Ü–∏—Ä—É–µ—Ç –∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç—ã.
    """
    try:
        if platform == "auto":
            platform = detect_platform(url)

        if platform == "youtube":
            vid = extract_youtube_video_id(url)
            if not vid:
                return None, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å ID –≤–∏–¥–µ–æ YouTube.", None
            df = yt_fetch(YOUTUBE_API_KEY, vid, MAX_COMMENTS)

        elif platform == "facebook":
            if not FACEBOOK_ACCESS_TOKEN:
                return None, "‚ö† –¢—Ä–µ–±—É–µ—Ç—Å—è FACEBOOK_ACCESS_TOKEN –≤ .env", None
            obj = extract_facebook_object_id(url)
            if not obj:
                return None, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Facebook.", None
            df = fb_fetch(FACEBOOK_ACCESS_TOKEN, obj, MAX_COMMENTS)

        elif platform == "instagram":
            if not (IG_USERNAME and IG_PASSWORD):
                return None, "‚ö† –¢—Ä–µ–±—É—é—Ç—Å—è IG_USERNAME –∏ IG_PASSWORD –≤ .env", None
            sc = extract_instagram_shortcode(url)
            if not sc:
                return None, "‚ùå –ù–µ–≤–µ—Ä–Ω–∞—è —Å—Å—ã–ª–∫–∞ Instagram.", None
            df = ig_fetch(sc, IG_USERNAME, IG_PASSWORD, MAX_COMMENTS)

        else:
            return None, "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞.", None

        if df is None or df.empty:
            return None, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.", None

        # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–∞–π–ø–ª–∞–π–Ω–æ–º
        df = run_pipeline(df)

        # –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã
        preview_rows = []
        for _, row in df.head(5).iterrows():
            reply_text = generate_reply(row["text"], row["language"])
            preview_rows.append(
                {
                    "text": row["text"][:140],
                    "—Ç–∏–ø": row["—Ç–∏–ø"],
                    "—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å": row["—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å"],
                    "toxicity": round(float(row["toxicity"]), 2),
                    "reply": reply_text,
                }
            )
        preview_df = pd.DataFrame(preview_rows)

        # –°–æ–∑–¥–∞—ë–º Excel-–æ—Ç—á—ë—Ç
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine="openpyxl") as writer:
            df.to_excel(writer, index=False, sheet_name="report")
        output.seek(0)

        return preview_df, "‚úÖ –ì–æ—Ç–æ–≤–æ", ("report.xlsx", output)

    except Exception as e:
        return None, f"–û—à–∏–±–∫–∞: {e}", None


# --- Gradio UI ---
with gr.Blocks(title="Social AI Moderator") as demo:
    gr.Markdown("# üìä Social AI Moderator ‚Äî YouTube / Facebook / Instagram")
    with gr.Row():
        platform = gr.Dropdown(
            ["auto", "youtube", "facebook", "instagram"],
            value="auto",
            label="–ü–ª–∞—Ç—Ñ–æ—Ä–º–∞"
        )
        url = gr.Textbox(label="–°—Å—ã–ª–∫–∞ –Ω–∞ –ø–æ—Å—Ç/–≤–∏–¥–µ–æ")
        run_btn = gr.Button("–ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å")

    status = gr.Markdown()
    table = gr.Dataframe(
        headers=["text", "—Ç–∏–ø", "—Ç–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å", "toxicity", "reply"],
        interactive=False
    )
    file = gr.File(label="–°–∫–∞—á–∞—Ç—å –æ—Ç—á—ë—Ç (xlsx)")

    def _run(platform, url):
        table_df, msg, file_tuple = analyze(platform, url)
        file_obj = None
        if file_tuple:
            name, bio = file_tuple
            file_obj = gr.File.update(value=(name, bio))
        return table_df, msg, file_obj

    run_btn.click(_run, inputs=[platform, url], outputs=[table, status, file])

if __name__ == "__main__":
    demo.launch(share=True, server_port=7860)
  # share=True —Å–æ–∑–¥–∞—ë—Ç –ø—É–±–ª–∏—á–Ω—É—é —Å—Å—ã–ª–∫—É
